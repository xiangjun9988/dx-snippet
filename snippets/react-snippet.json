{
    "import": {
        "prefix": "imp",
        "body": "import ${2:name} from '${1:module}';"
    },
    "importNoModuleName": {
        "prefix": "imn",
        "body": "import '$1';"
    },
    "importDestructing": {
        "prefix": "imd",
        "body": "import { $2 } from '${1:module}';"
    },
    "import React, { Component }": {
        "prefix": "imrc",
        "body": "import React, { Component } from 'react';"
    },
    "import redux statement": {
        "prefix": "redux",
        "body": "import { connect } from 'react-redux';"
    },
    "import router statement": {
        "prefix": "router",
        "body": "import { $1 } from 'react-router-dom';"
    },
    "consoleLog": {
        "prefix": "clg",
        "body": "console.log($1)",
        "description": "Displays a message in the console"
    },
    "EslintDisableLine": {
        "prefix": "edl",
        "body": "// eslint-disable-next-line",
        "description": "Eslint Disable Line"
    },
    "reactClassComponent": {
        "prefix": "rcc",
        "body": [
            "import React, { Component } from 'react';",
            "",
            "class ${1:componentName} extends Component {",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$0",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}",
            "",
            "export default ${1:componentName};",
            ""
        ],
        "description": "Creates a React component class with ES6 module system"
    },
    "reactJustClassComponent": {
        "prefix": "rcjc",
        "body": [
            "class ${1:componentName} extends Component {",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$0",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}",
            ""
        ],
        "description": "Creates a React component class with ES6 module system"
    },
    "reactClassComponentPropTypes": {
        "prefix": "rccp",
        "body": [
            "import React, { Component } from 'react';",
            "import PropTypes from 'prop-types';",
            "",
            "",
            "const propTypes = {",
            "\t",
            "};",
            "",
            "",
            "class ${1:componentName} extends Component {",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "\t\t\t\t$0",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}",
            "",
            "",
            "${1:componentName}.propTypes = propTypes;",
            "",
            "",
            "export default ${1:componentName};",
            ""
        ],
        "description": "Creates a React component class with PropTypes and ES6 module system"
    },
    "reactClassComponentWithMethods": {
        "prefix": "rcfc",
        "body": [
            "import React, { Component } from 'react';",
            "import PropTypes from 'prop-types';",
            "",
            "class ${1:componentName} extends Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props);",
            "",
            "\t}",
            "",
            "\tcomponentWillMount() {",
            "",
            "\t}",
            "",
            "\tcomponentDidMount() {",
            "",
            "\t}",
            "",
            "\tcomponentWillReceiveProps(nextProps) {",
            "",
            "\t}",
            "",
            "\tshouldComponentUpdate(nextProps, nextState) {",
            "",
            "\t}",
            "",
            "\tcomponentWillUpdate(nextProps, nextState) {",
            "",
            "\t}",
            "",
            "\tcomponentDidUpdate(prevProps, prevState) {",
            "",
            "\t}",
            "",
            "\tcomponentWillUnmount() {",
            "",
            "\t}",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>",
            "",
            "\t\t\t</div>",
            "\t\t);",
            "\t}",
            "}",
            "",
            "${1:componentName}.propTypes = {",
            "",
            "};",
            "",
            "export default ${1:componentName};"
        ],
        "description": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
    },
    "reactWithWebpackDefaults": {
        "prefix": "rwwd",
        "body": [
            "class ${1:componentName} extends Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props);",
            "",
            "\t\tthis.state = {};",
            "",
            "\t}",
            "",
            "\trender() {",
            "\t\treturn(",
            "\t\t\t<div>",
            "",
            "\t\t\t$0</div>",
            "\t\t);",
            "\t}",
            "}",
            "",
            "${1:componentName}.propTypes = {",
            "",
            "};",
            "",
            "export default ${1:componentName};"
        ],
        "description": "Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)"
    },
    "reactStateless": {
        "prefix": "rsc",
        "body": [
            "import React from 'react';",
            "",
            "const ${1:componentName} = () => (",
            "\t<div>",
            "\t\t$0",
            "\t</div>",
            ");",
            "",
            "export default ${1:componentName};",
            ""
        ],
        "description": "Creates a stateless React component without PropTypes and ES6 module system"
    },
    "reactStatelessProps": {
        "prefix": "rscp",
        "body": [
            "import React from 'react';",
            "import PropTypes from 'prop-types';",
            "",
            "",
            "const propTypes = {",
            "\t$0",
            "};",
            "",
            "",
            "const ${1:componentName} = () => {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$2",
            "\t\t</div>",
            "\t);",
            "};",
            "",
            "",
            "${1:componentName}.propTypes = propTypes;",
            "",
            "",
            "export default ${1:componentName};",
            ""
        ],
        "description": "Creates a stateless React component with PropTypes and ES6 module system"
    },
    "classConstructor": {
        "prefix": "con",
        "body": [
            "constructor(props) {",
            "\tsuper(props);",
            "\t$1",
            "}",
            ""
        ],
        "description": "Adds a default constructor for the class that contains props as arguments"
    },
    "classConstructorContext": {
        "prefix": "conc",
        "body": [
            "constructor(props, context) {",
            "\tsuper(props, context);",
            "\t$1",
            "}",
            ""
        ],
        "description": "Adds a default constructor for the class that contains props and context as arguments"
    },
    "emptyState": {
        "prefix": "est",
        "body": [
            "this.state = {",
            "\t$1",
            "};"
        ],
        "description": "Creates empty state object. To be used in a constructor."
    },
    "componentWillMount": {
        "prefix": "cwm",
        "body": [
            "",
            "componentWillMount() {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
    },
    "componentDidMount": {
        "prefix": "cdm",
        "body": [
            "componentDidMount() {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
    },
    "componentWillReceiveProps": {
        "prefix": "cwr",
        "body": [
            "componentWillReceiveProps(nextProps) {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
    },
    "shouldComponentUpdate": {
        "prefix": "scu",
        "body": [
            "shouldComponentUpdate(nextProps, nextState) {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked before rendering when new props or state are being received. "
    },
    "componentWillUpdate": {
        "prefix": "cwup",
        "body": [
            "componentWillUpdate(nextProps, nextState) {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked immediately before rendering when new props or state are being received."
    },
    "componentDidUpdate": {
        "prefix": "cdup",
        "body": [
            "componentDidUpdate(prevProps, prevState) {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked immediately after the component's updates are flushed to the DOM."
    },
    "componentWillUnmount": {
        "prefix": "cwun",
        "body": [
            "componentWillUnmount() {",
            "\t$1",
            "}",
            ""
        ],
        "description": "Invoked immediately before a component is unmounted from the DOM."
    },
    "componentRender": {
        "prefix": "ren",
        "body": [
            "render() {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$1",
            "\t\t</div>",
            "\t);",
            "}"
        ],
        "description": "When called, it should examine this.props and this.state and return a single child element."
    },
    "componentSetStateObject": {
        "prefix": "sst",
        "body": "this.setState($1)",
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentSetStateFunc": {
        "prefix": "ssf",
        "body": [
            "this.setState((state, props) => { return { $1 }});",
            ""
        ],
        "description": "Performs a shallow merge of nextState into current state"
    },
    "componentProps": {
        "prefix": "props",
        "body": "this.props.$1",
        "description": "Access component's props"
    },
    "componentState": {
        "prefix": "state",
        "body": "this.state.$1",
        "description": "Access component's state"
    },
    "bindThis": {
        "prefix": "bnd",
        "body": "this.$1 = this.$1.bind(this);",
        "description": "Binds the this of a method. To be used inside a constructor"
    },
    "propTypeArray": {
        "prefix": "pta",
        "body": "PropTypes.array,",
        "description": "Array prop type"
    },
    "propTypeArrayRequired": {
        "prefix": "ptar",
        "body": "PropTypes.array.isRequired,",
        "description": "Array prop type required"
    },
    "propTypeBool": {
        "prefix": "ptb",
        "body": "PropTypes.bool,",
        "description": "Bool prop type"
    },
    "propTypeBoolRequired": {
        "prefix": "ptbr",
        "body": "PropTypes.bool.isRequired,",
        "description": "Bool prop type required"
    },
    "propTypeFunc": {
        "prefix": "ptf",
        "body": "PropTypes.func,",
        "description": "Func prop type"
    },
    "propTypeFuncRequired": {
        "prefix": "ptfr",
        "body": "PropTypes.func.isRequired,",
        "description": "Func prop type required"
    },
    "propTypeNumber": {
        "prefix": "ptn",
        "body": "PropTypes.number,",
        "description": "Number prop type"
    },
    "propTypeNumberRequired": {
        "prefix": "ptnr",
        "body": "PropTypes.number.isRequired,",
        "description": "Number prop type required"
    },
    "propTypeObject": {
        "prefix": "pto",
        "body": "PropTypes.object,",
        "description": "Object prop type"
    },
    "propTypeObjectRequired": {
        "prefix": "ptor",
        "body": "PropTypes.object.isRequired,",
        "description": "Object prop type required"
    },
    "propTypeString": {
        "prefix": "pts",
        "body": "PropTypes.string,",
        "description": "String prop type"
    },
    "propTypeStringRequired": {
        "prefix": "ptsr",
        "body": "PropTypes.string.isRequired,",
        "description": "String prop type required"
    },
    "propTypeNode": {
        "prefix": "ptnd",
        "body": "PropTypes.node,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array"
    },
    "propTypeNodeRequired": {
        "prefix": "ptndr",
        "body": "PropTypes.node.isRequired,",
        "description": "Anything that can be rendered: numbers, strings, elements or an array required"
    },
    "propTypeElement": {
        "prefix": "ptel",
        "body": "PropTypes.element,",
        "description": "React element prop type"
    },
    "propTypeElementRequired": {
        "prefix": "ptelr",
        "body": "PropTypes.element.isRequired,",
        "description": "React element prop type required"
    },
    "propTypeInstanceOf": {
        "prefix": "pti",
        "body": "PropTypes.instanceOf($1),",
        "description": "Is an instance of a class prop type"
    },
    "propTypeInstanceOfRequired": {
        "prefix": "ptir",
        "body": "PropTypes.instanceOf($1).isRequired,",
        "description": "Is an instance of a class prop type required"
    },
    "propTypeEnum": {
        "prefix": "pte",
        "body": "PropTypes.oneOf(['$1']),",
        "description": "Prop type limited to specific values by treating it as an enum"
    },
    "propTypeEnumRequired": {
        "prefix": "pter",
        "body": "PropTypes.oneOf(['$1']).isRequired,",
        "description": "Prop type limited to specific values by treating it as an enum required"
    },
    "propTypeOneOfType": {
        "prefix": "ptet",
        "body": [
            "PropTypes.oneOfType([",
            "\t$1",
            "]),"
        ],
        "description": "An object that could be one of many types"
    },
    "propTypeOneOfTypeRequired": {
        "prefix": "ptetr",
        "body": [
            "PropTypes.oneOfType([",
            "\t$1",
            "]).isRequired,"
        ],
        "description": "An object that could be one of many types required"
    },
    "propTypeArrayOf": {
        "prefix": "ptao",
        "body": "PropTypes.arrayOf($1),",
        "description": "An array of a certain type"
    },
    "propTypeArrayOfRequired": {
        "prefix": "ptaor",
        "body": "PropTypes.arrayOf($1).isRequired,",
        "description": "An array of a certain type required"
    },
    "propTypeObjectOf": {
        "prefix": "ptoo",
        "body": "PropTypes.objectOf($1),",
        "description": "An object with property values of a certain type"
    },
    "propTypeObjectOfRequired": {
        "prefix": "ptoor",
        "body": "PropTypes.objectOf($1).isRequired,",
        "description": "An object with property values of a certain type required"
    },
    "propTypeShape": {
        "prefix": "ptsh",
        "body": [
            "PropTypes.shape({",
            "\t$1",
            "}),"
        ],
        "description": "An object taking on a particular shape"
    },
    "propTypeShapeRequired": {
        "prefix": "ptshr",
        "body": [
            "PropTypes.shape({",
            "\t$1",
            "}).isRequired,"
        ],
        "description": "An object taking on a particular shape required"
    }
}